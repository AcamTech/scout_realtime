#!/usr/bin/env ruby

$LOAD_PATH << File.join(File.dirname(__FILE__), *%w[.. lib])
load "scout_realtime.rb"  # bootstraps everything, including all other requires
require "dante"           # ... except dante, which is required here because it's only relevant to running via command line
require "fileutils"       # ... and fileutils, which we use for setting up the home directory

# by default, scout_realtime puts its pid and logfile in ~/.scout/
home_dir =  File.join( (File.expand_path("~") rescue "/"), ".scout" )
FileUtils.mkdir_p(home_dir) # ensure home directory exists
pid_path = File.join(home_dir, "scout_realtime.pid")
log_path = File.join(home_dir, "scout_realtime.log")

# parse the command
cmd = ARGV.first
command = nil
command = :start if cmd.nil?
command = cmd.downcase.to_sym if cmd && %w(start stop help).include?(cmd.downcase)

# parse the options

opts = Trollop::options do
  banner <<-EOS
Stream realtime server metrics to your browser!

Usage:
       scout_realtime [start|stop]
where [options] are:
  EOS

  opt :port, "point your web browser to this port to view realtime metrics.", :default => 5555, :short => "-p"
  opt :foreground, "run in the foreground, i.e., don't daemonize the process. Useful for debugging.", :default => false, :short => "-f"
end
# future options: pid, log -- set different locations

# TODO: should be able to pass :daemonize => !opts[:foreground] to Dante::Runner instead
if opts[:foreground]
  puts " ** Initializing. cntl-c to stop. Logging to STDOUT **"
  Scout::Realtime::Main.instance(:port=>opts[:port]).go_sinatra
else
  if command == :start
    Dante::Runner.new('scout_realtime').execute(:daemonize => !opts[:foreground], :pid_path => pid_path, :log_path => log_path, :port=>opts[:port]) do |options|
      Scout::Realtime::Main.instance(:port=>options[:port]).go_sinatra
    end
  elsif command == :stop
    Dante::Runner.new('scout_realtime').execute(:kill => true, :pid_path => pid_path)
  elsif command == :help
    puts "help ..."
  end
end








