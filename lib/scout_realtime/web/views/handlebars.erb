<span style="color:lightgray;">(thread: <%= Scout::Realtime::Main.instance.stats_thread.status %>)</span>. Realtime is
<% if Scout::Realtime::Main.instance.running %>
  <strong>running.</strong> start realtime | <a href="/stop">stop realtime</a>
<% else %>
  stopped. <a href="/start">start realtime</a> | stop realtime.
<% end %>

<% if Scout::Realtime::Main.instance.running %>
  <script>
    function refresh() {
      $.getJSON("/stats.json", function (d) {
        server_metrics =d;
        $("#data").text(JSON.stringify(d))
});
}
$(function(){
  setInterval(refresh,1000);
})

</script>
<% end %>

<pre id="data"></pre>

<div id="cpu"></div>
<div id="memory"></div>
<div id="network"></div>
<div id="disks"></div>


<script id="cpu-template" type="text/x-handlebars-template">
<h2>CPU</h2>
  <ul>
    <li>Last minute / 5 minutes / 15 minutes: {{last_minute}} / {{last_five_minutes}} / {{last_fifteen_minutes}}</li>
    <li>Procs running / blocked: {{procs_running}} / {{procs_blocked}}</li>
    <li>IO Wait: {{io_wait}}</li>
<li>Idle / system / user: {{percent idle}} / {{percent system}} / {{percent user}}</li>
    <li>Interrupts: {{decimal interrupts}}</li>
</ul>
</script>

<script id="memory-template" type="text/x-handlebars-template">
<h2>Memory</h2>
  <ul>
    <li>Memory: {{mb used}} used of {{mb size}} ({{percent used_percent}})</li>
<li>Swap: {{mb swap_used}} used of {{mb swap_size}} ({{percent swap_used_percent}})</li>
  </ul>
</script>

<script id="network-template" type="text/x-handlebars-template">
  <h2>Networks</h2>

  {{#each networks}}
    <h3>{{name}}</h3>
  <ul>
    <li>Bytes in/out: {{bytes_in}} / {{bytes_out}}</li>
    <li>Packets in/out: {{packets_in}} / {{packets_out}}</li>
  </ul>
  {{/each}}
</script>

<script id="disks-template" type="text/x-handlebars-template">
  <h2>Disks</h2>

  {{#each disks}}
  <h3>{{filesystem}}</h3>
  <ul>
    <ul>Utilization: {{utilization}}</ul>
    <ul>Used: {{mb used}} of {{mb size}} ({{used_percent}})</ul>
    <ul>RPS / WPS: {{rps}} ({{rps_kb}}KB) / {{wps}} ({{wps_kb}})</ul>
    <ul>Average queue length: {{average_queue_length}}</ul>
  </ul>
  {{/each}}
</script>

<script>
  Handlebars.registerHelper('percent', function(number) {
    return number.toFixed(2)+"%";
  });
  Handlebars.registerHelper('decimal', function(number) {
    return number.toFixed(2);
  });
  Handlebars.registerHelper('mb', function(number) {
    return number.toFixed(0)+"MB";
  });


  // process the network data structure, so it's an an array of hashes (including name) instead of a hash of hahses by name
  metrics['network']['networks'] = $.map(metrics['network'],function(v,k){
    return $.extend(v,{"name":k});
  });

  metrics['disks']['disks'] = $.map(metrics['disks'], function(v,k){
    return v; //no need to extend key, since it's already part of the object
  });

  $.each(["cpu", "memory", "network", "disks"],function(i,s){
    var source   = $("#"+s+"-template").html();
var template = Handlebars.compile(source);
var html    = template(metrics[s]);
$("#"+s).html(html)
});

</script>




